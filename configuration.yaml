#-------------------------------------------------------------------------------------------------------
#                                                                                                      |
#                                           JCORE CONFIG                                               |
#                                                                                                      |
#-------------------------------------------------------------------------------------------------------

# Reverse proxy support
http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 127.0.0.1
    - ::1
    - 172.0.0.0/8
    - 172.18.0.3  
    - 172.18.0.0/16
    - 172.20.0.0/16 
    - 192.168.0.0/16
    - 10.0.0.0/8
  cors_allowed_origins:
    - https://ha.dreammachine.casa
    - https://jcore.dreammachine.casa

# Load defaults
default_config:

# Frontend custom config
frontend:
  themes: !include_dir_merge_named themes
  extra_module_url:
    - /local/community/lovelace-card-mod/card-mod.js
    - /local/grafana-persistent.js

# Lovelace configuration (fixed - removed duplicate)
lovelace:
  mode: yaml
  resources:
    - url: /local/addon-iframe-card.js
      type: module
  dashboards:
    mac-dashboard:
      mode: yaml
      title: macOS Dashboard
      icon: mdi:apple
      show_in_sidebar: true
      filename: mac-dashboard.yaml

# HACS integrations dashboard
hacs:
  token: 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

homeassistant:
  packages: !include_dir_named packages
  allowlist_external_dirs:
  allowlist_external_urls:
    - https://grafana.dreammachine.casa/*
    - https://grafana.dreammachine.casa/public-dashboards/*

# Automations
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

#-------------------------------------------------------------------------------------------------------
#                                        VOICE ASSISTANT CONFIG                                        |
#-------------------------------------------------------------------------------------------------------

# Wyoming Protocol Support
wyoming:

# Voice Assistant Pipeline
assist_pipeline:

# Speech-to-Text (Whisper via Wyoming)
stt:
  - platform: wyoming
    host: jcore_whisper
    port: 10300
    name: "Whisper STT"

# Wake Word Detection (OpenWakeWord via Wyoming)
wake_word:
  - platform: wyoming
    host: jcore_openwakeword
    port: 10400
    name: "OpenWakeWord"

# Text-to-Speech (Piper - already configured via container)
tts:
  - platform: wyoming
    host: jcore_wyoming
    port: 10200
    name: "Piper TTS"

# Voice Assistant Configuration
voice_assistant:
  - name: "JIA Satellite 1 Voice Pipeline"
    stt_engine: wyoming_whisper
    tts_engine: wyoming_piper
    wake_word_engine: wyoming_openwakeword
    conversation_agent: conversation.home_assistant
    vad:
      silence_seconds: 2
      volume_multiplier: 2.0
      noise_suppression_level: 2

# Enhanced conversation intents
conversation:
  intents:
    JIALightControl:
      - "turn {on_off} [the] {name} [light]"
      - "switch {on_off} [the] {name}"
      - "{on_off} [the] {name} [light]"
    JIAServerControl:
      - "shutdown [the] hetzner server"
      - "restart [the] hetzner server" 
      - "power {action} [the] server"
      - "server {action}"
    JIASystemStatus:
      - "what is [the] status of {name}"
      - "how is [the] {name} doing"
      - "check [the] {name}"
      - "system status"
    JIAVolumeControl:
      - "set volume to {level}"
      - "volume {level}"
      - "make it {louder_quieter}"

# Intent scripts for JIA-SAT-1 commands
intent_script:
  JIALightControl:
    speech:
      text: >
        {% if on_off == "on" %}
          Turning on {{ name }}
        {% else %}
          Turning off {{ name }}
        {% endif %}
    action:
      - service: "light.turn_{{ on_off }}"
        target:
          entity_id: "light.{{ name | replace(' ', '_') | lower }}"

  JIAServerControl:
    speech:
      text: >
        {% if action == "shutdown" or "shutdown" in trigger.slots.text %}
          Shutting down Hetzner server
        {% elif action == "restart" or "restart" in trigger.slots.text %}
          Restarting Hetzner server
        {% elif "off" in action %}
          Powering off Hetzner server
        {% elif "on" in action %}
          Powering on Hetzner server
        {% endif %}
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ 'shutdown' in trigger.slots.text }}"
            sequence:
              - service: rest_command.hetzner_shutdown_server
                data:
                  server_id: "{{ states('input_text.hetzner_server_id') }}"
                  api_token: "{{ states('input_text.hetzner_api_token') }}"
          - conditions:
              - condition: template
                value_template: "{{ 'power off' in trigger.slots.text or 'poweroff' in trigger.slots.text }}"
            sequence:
              - service: rest_command.hetzner_poweroff_server
                data:
                  server_id: "{{ states('input_text.hetzner_server_id') }}"
                  api_token: "{{ states('input_text.hetzner_api_token') }}"
          - conditions:
              - condition: template
                value_template: "{{ 'power on' in trigger.slots.text or 'poweron' in trigger.slots.text }}"
            sequence:
              - service: rest_command.hetzner_poweron_server
                data:
                  server_id: "{{ states('input_text.hetzner_server_id') }}"
                  api_token: "{{ states('input_text.hetzner_api_token') }}"

  JIASystemStatus:
    speech:
      text: >
        {% if name == "server" or name == "hetzner" %}
          Hetzner server status is {{ states('sensor.hetzner_server_simple_status') }}
        {% elif name == "voice" or name == "voice system" %}
          Voice pipeline status is {{ states('sensor.voice_pipeline_status') }}
        {% else %}
          System is running normally. Voice pipeline is {{ states('sensor.voice_pipeline_status') }}.
          Server status is {{ states('sensor.hetzner_server_simple_status') }}.
        {% endif %}
    action: []

  JIAVolumeControl:
    speech:
      text: >
        {% if level is defined %}
          Setting volume to {{ level }}
        {% elif louder_quieter == "louder" %}
          Increasing volume
        {% elif louder_quieter == "quieter" %}
          Decreasing volume
        {% endif %}
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ level is defined }}"
            sequence:
              - service: input_number.set_value
                target:
                  entity_id: input_number.voice_volume
                data:
                  value: "{{ level | int }}"

#-------------------------------------------------------------------------------------------------------
#                                           DATABASE CONFIG                                            |
#-------------------------------------------------------------------------------------------------------

# MariaDB
recorder:
  db_url: mysql://mbxxvii:6wk44!ez#MS2Qhhw@jcore_mariadb:3306/JCORE?charset=utf8mb4
  purge_keep_days: 10
  commit_interval: 5
  exclude:
    domains:
      - automation
      - updater
    entity_globs:
      - sensor.last_boot
      - sensor.date*
    entities:
      - sun.sun
      - sensor.jia_sat_1_jia_volume

# InfluxDB
influxdb:
  host: jcore_influxdb
  port: 8086
  api_version: 2
  token: yKetXhtpyszZ7DLg4omRT7nr96InN6SSzgbQG5k9iyhGdP3ZMoks3U00Hvz134c7b7iYfEMTGLqNHLEgGOEpWw==
  organization: a3a457155edbb91d
  bucket: jcore
  default_measurement: state
  ssl: false
  verify_ssl: false

# Prometheus metrics endpoint
prometheus:
  namespace: hass
  requires_auth: false 
  include:
    domains:
      - sensor
      - binary_sensor
      - sun
    entities:
      - sensor.living_room_temperature
      - sensor.front_door_battery_level

#-------------------------------------------------------------------------------------------------------
#                                           INPUT HELPERS                                              |
#-------------------------------------------------------------------------------------------------------

# Input text helpers
input_text:
  hetzner_server_id:
    name: Hetzner Server ID
    initial: !secret hetzner_server_id
    mode: password
  hetzner_api_token:
    name: Hetzner API Token  
    initial: !secret hetzner_api_token
    mode: password

# Voice Assistant Input Helpers
input_select:
  voice_wake_word:
    name: "Active Wake Word"
    options:
      - "alexa"
      - "hey_jarvis"
      - "ok_nabu"
    initial: "alexa"

  jia_sat_1_voice_mode:
    name: "JIA SAT 1 Voice Mode"
    options:
      - "Always Listening"
      - "Push to Talk"
      - "Wake Word Only"
      - "Disabled"
    initial: "Wake Word Only"

input_number:
  voice_volume:
    name: "Voice Assistant Volume"
    min: 0
    max: 100
    step: 5
    initial: 75
    unit_of_measurement: "%"
    icon: mdi:volume-high

  wake_word_threshold:
    name: "Wake Word Sensitivity"
    min: 0.1
    max: 1.0
    step: 0.1
    initial: 0.5
    icon: mdi:ear-hearing

input_boolean:
  voice_assistant_enabled:
    name: "Voice Assistant Enabled"
    initial: true
    icon: mdi:microphone

  jia_sat_1_auto_respond:
    name: "JIA SAT 1 Auto Response"
    initial: true
    icon: mdi:robot-outline

  jia_sat_1_server_control:
    name: "JIA SAT 1 Server Control Enabled"
    initial: false  # Disabled by default for safety
    icon: mdi:server-security

#-------------------------------------------------------------------------------------------------------
#                                           REST COMMANDS                                              |
#-------------------------------------------------------------------------------------------------------

# Rest Commands
rest_command:
  hetzner_shutdown_server:
    url: "https://api.hetzner.cloud/v1/servers/{{ server_id }}/actions/shutdown"
    method: POST
    headers:
      Authorization: "Bearer {{ api_token }}"
      Content-Type: "application/json"
    payload: '{}'
  
  hetzner_poweroff_server:
    url: "https://api.hetzner.cloud/v1/servers/{{ server_id }}/actions/poweroff"
    method: POST
    headers:
      Authorization: "Bearer {{ api_token }}"
      Content-Type: "application/json"
    payload: '{}'

  hetzner_poweron_server:
    url: "https://api.hetzner.cloud/v1/servers/{{ server_id }}/actions/poweron"
    method: POST
    headers:
      Authorization: "Bearer {{ api_token }}"
      Content-Type: "application/json"
    payload: '{}'

#-------------------------------------------------------------------------------------------------------
#                                              SENSORS                                                 |
#-------------------------------------------------------------------------------------------------------

# Sensors
sensor:
  - platform: rest
    name: "Hetzner Server Direct"
    resource: "https://api.hetzner.cloud/v1/servers/61655748"
    headers:
      Authorization: "Bearer nRElzSvzwYxEdL8AJUO4D3hJDVzagqdUndQ8jnvpNXufyyRTDMkClAE7Oq8IgN0E"
    value_template: "{{ value_json.server.status }}"
    json_attributes:
      - server
    scan_interval: 60

  # Voice System Monitoring Sensors
  - platform: rest
    name: "Whisper Service Status"
    resource: "http://jcore_whisper:10300/"
    method: GET
    value_template: >
      {% if value_json is defined %}
        Online
      {% else %}
        Offline
      {% endif %}
    scan_interval: 60

  - platform: rest
    name: "OpenWakeWord Service Status"
    resource: "http://jcore_openwakeword:10400/"
    method: GET
    value_template: >
      {% if value_json is defined %}
        Online
      {% else %}
        Offline
      {% endif %}
    scan_interval: 60

  - platform: rest
    name: "Piper Service Status"
    resource: "http://jcore_wyoming:10200/"
    method: GET
    value_template: >
      {% if value_json is defined %}
        Online
      {% else %}
        Offline
      {% endif %}
    scan_interval: 60

binary_sensor:
  - platform: rest
    name: "Metrics Endpoint Running"
    resource: http://5.9.20.78:9100/metrics
    method: GET
    value_template: "{{ value | length > 0 }}"
    device_class: connectivity
    scan_interval: 60

#-------------------------------------------------------------------------------------------------------
#                                           SENSOR TEMPLATES                                           |
#-------------------------------------------------------------------------------------------------------

# Sensor Templates
template:
  sensor:
    - name: "Hetzner Server #1 Status"
      state: "{{ states('sensor.hetzner_server_direct') | capitalize }}"
      icon: >-
        {% if is_state('sensor.hetzner_server_direct','running') %}
          mdi:server-network
        {% else %}
          mdi:server-off
        {% endif %}

    - name: "Hetzner Server Simple Status"
      state: "{{ states('sensor.hetzner_server_direct') }}"
      icon: >-
        {% if states('sensor.hetzner_server_direct') == 'running' %}
          mdi:server
        {% else %}
          mdi:server-off
        {% endif %}

    - name: "Metrics Server Status"
      state: >-
        {% if is_state('binary_sensor.metrics_endpoint_running','on') %}
          Running
        {% else %}
          Down
        {% endif %}

    # Voice Pipeline Status Templates
    - name: "Voice Pipeline Status"
      state: >
        {% set whisper = states('sensor.whisper_service_status') %}
        {% set wake = states('sensor.openwakeword_service_status') %}
        {% set piper = states('sensor.piper_service_status') %}
        {% if whisper == 'Online' and wake == 'Online' and piper == 'Online' %}
          Fully Operational
        {% elif whisper == 'Online' and piper == 'Online' %}
          Ready (No Wake Word)
        {% elif whisper == 'Online' %}
          STT Only
        {% elif piper == 'Online' %}
          TTS Only
        {% else %}
          Offline
        {% endif %}
      icon: >
        {% if states('sensor.voice_pipeline_status') == 'Fully Operational' %}
          mdi:microphone
        {% elif 'Ready' in states('sensor.voice_pipeline_status') %}
          mdi:microphone-outline
        {% else %}
          mdi:microphone-off
        {% endif %}
      attributes:
        whisper_status: "{{ states('sensor.whisper_service_status') }}"
        wake_word_status: "{{ states('sensor.openwakeword_service_status') }}"
        piper_status: "{{ states('sensor.piper_service_status') }}"

    - name: "Voice System Health"
      state: >
        {% set services = [
          states('sensor.whisper_service_status'),
          states('sensor.openwakeword_service_status'),
          states('sensor.piper_service_status')
        ] %}
        {% set online_count = services | select('eq', 'Online') | list | length %}
        {{ (online_count / 3 * 100) | round(0) }}%
      unit_of_measurement: "%"
      icon: >
        {% set health = states('sensor.voice_system_health') | int %}
        {% if health == 100 %}
          mdi:heart
        {% elif health >= 66 %}
          mdi:heart-half
        {% elif health >= 33 %}
          mdi:heart-outline
        {% else %}
          mdi:heart-broken
        {% endif %}

    - name: "JIA SAT 1 Status"
      state: >
        {% if states('binary_sensor.jia_sat_1_status') == 'on' %}
          Online
        {% else %}
          Offline
        {% endif %}
      icon: >
        {% if states('binary_sensor.jia_sat_1_status') == 'on' %}
          mdi:satellite-variant
        {% else %}
          mdi:satellite-off
        {% endif %}

    - name: "JIA SAT 1 Voice Status"
      state: >
        {% if states('switch.jia_sat_1_voice_assistant') == 'on' %}
          {% if states('sensor.voice_pipeline_status') == 'Fully Operational' %}
            Ready
          {% else %}
            Limited
          {% endif %}
        {% else %}
          Disabled
        {% endif %}
      icon: >
        {% if states('switch.jia_sat_1_voice_assistant') == 'on' %}
          {% if states('sensor.voice_pipeline_status') == 'Fully Operational' %}
            mdi:microphone
          {% else %}
            mdi:microphone-outline
          {% endif %}
        {% else %}
          mdi:microphone-off
        {% endif %}
